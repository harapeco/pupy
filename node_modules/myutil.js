var util = require('util')
	,EventEmitter = require('events').EventEmitter
	,fs = require('fs');

exports.merge = function() {
	var args = Array.prototype.slice.call(arguments)
	,len = args.length
	,ret = {};
	
	for (var i=0; i<len; i++) {
		var arg = args[i];
		for (var itm in arg) {
			if (arg.hasOwnProperty(itm))
				ret[itm] = arg[itm];
		}
	}
	return ret;
};

exports.capitalize = function(str) {
	return str.replace(/\w+/g, function(word){
		return word.charAt(0).toUpperCase() + word.substr(1).toLowerCase();
	});
};
exports.file_get_contents = function(path) {
	fs.readFileSync(path, 'utf-8', function(err, data) {
		if (err) throw err;
		console.dir(data);
		return data;
	});
};

exports.Sync = {
		instance: null,
		ev: new EventEmitter,
		oldFunc: null,
		oldArgs: null,
		func: null,
		init: function(instance) {
			this.instance = instance;
			return this;
		},
		push: function() {
			var args = Array.prototype.slice.call(arguments);
			if (args.length < 1)
				throw new Error('Invalid arguments.');
			var funcName = args.shift();
			var ev = this.ev;
			if (this.oldFunc) var oldFunc = this.oldFunc;
			this.ev.on(funcName, function(instance) {
				instance[funcName].apply(null, args);
				if (oldFunc)
					ev.emit(oldFunc, instance);
			});
			this.oldFunc = funcName;
			return this;
		},
		run: function() {
			this.ev.emit(this.oldFunc, this.instance);
		}
	};